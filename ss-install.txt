#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: http://mirrors.slickstack.io/ss-install.txt ###########################################
#### path: /var/www/ss-install #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: installs SlickStack server (idempotent) ##############################################
#### ss version: SlickStack alpha ss4b #############################################################
#### module version: n/a ###########################################################################
####################################################################################################

## SS-CONFIG MUST BE CONFIGURED BEFORE RUNNING THIS INSTALL SCRIPT ##
## include SlickStack configuration ##
source /var/www/ss-config

####################################################################################################
#### retrieve latest SlickStack core files (ss-check) ##############################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mRetrieving latest SlickStack files and copying them to local server...\e[0m"

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/ss-check.txt http://mirrors.slickstack.io/ss-check.txt

## rename files ##
mv /tmp/ss-check.txt /tmp/ss-check

## copy to destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/ss-check /var/www/ss-check

## reset permissions ##
chown root:root /var/www/ss-check
chmod 755 /var/www/ss-check

## call scripts ##
source /var/www/ss-check
source /var/www/ss-perms

####################################################################################################
#### install SlickStack (LEMP+) modules from latest Ubuntu repos ###################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling various SlickStack modules from most recent Ubuntu repos...\e[0m"

## fix dpkg ##
DEBIAN_FRONTEND=noninteractive dpkg --configure -a --force-confold

## update repo cache ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## upgrade existing repos ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade

## autoremove ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" autoremove

## install update-manager-core ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install update-manager-core

## install Linux utilities ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install zip unzip

## install Git ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install git

## install ClamAV ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install clamav

####################################################################################################
#### configure Ubuntu users, permissions, and defaults #############################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring users, permissions and Ubuntu defaults...\e[0m"

## reset root ssh/sftp password ##
echo root:$rootpass | /usr/sbin/chpasswd

## ensure root password never expires ##
chage -E -1 -m 0 -M -1 -I -1 -W 99999 root

## add sudo ssh/sftp user ##
adduser --disabled-password --gecos "" $sudo
echo $sudo:$sudopass | /usr/sbin/chpasswd

## add non-sudo sftp user (chroot jail) ##
adduser --disabled-password --gecos "" $user
echo $user:$userpass | /usr/sbin/chpasswd

## set default editor to nano ##
update-alternatives --set editor /bin/nano

## set UTC timezone ##
timedatectl set-timezone UTC

####################################################################################################
#### Configure Ubuntu: Sudoers (a.k.a. Visudo) #####################################################
####################################################################################################

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/sudoers.txt http://mirrors.slickstack.io/ubuntu/sudoers.txt

## replace variables ##
sed -i "s/@SUDO/${sudo}/g" /tmp/sudoers.txt

## rename files ##
mv /tmp/sudoers.txt /tmp/sudoers

## copy to destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/sudoers /etc/sudoers

## reset permissions ##
chown root:root /etc/sudoers
chmod 440 /etc/sudoers

####################################################################################################
#### Configure Ubuntu: SSH (SFTP) ##################################################################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mConfiguring various SSH (SFTP) settings and permissions...\e[0m"

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/sshd-config.txt http://mirrors.slickstack.io/ubuntu/sshd-config.txt

## replace variables ##
sed -i "s/@SUDO/${sudo}/g" /tmp/sshd-config.txt
sed -i "s/@USER/${user}/g" /tmp/sshd-config.txt

## rename files ##
mv /tmp/sshd-config.txt /tmp/sshd_config

## overwrite all files to their various destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/sshd_config /etc/ssh/sshd_config

## reset permissions ##
chown root:root /etc/ssh/sshd_config

## restart ssh ##
/etc/init.d/ssh restart

####################################################################################################
#### install crontab ###############################################################################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling the SlickStack crontab file to Ubuntu crontab...\e[0m"

## delete tmp files ##
# rm -R -f /tmp/crontab.txt /tmp/root
## download latest versions ##
# cd /tmp/
# wget --no-cache http://mirrors.slickstack.io/ubuntu/crontab.txt
## rename files ##
# mv /tmp/crontab.txt /tmp/root
## copy files to destinations ##
# cp -R -f --preserve=mode,ownership /tmp/root /var/spool/cron/crontabs/root
## delete tmp files ##
# rm -R -f /tmp/crontab.txt /tmp/root

## install slickstack crontab ##
crontab /var/www/0-crontab

## reset permissions ##
chown root:root /var/spool/cron/crontabs/root

## reload crontab ##
/etc/init.d/cron reload

####################################################################################################
### install wp-cli #################################################################################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling the WP-CLI module directly from SlickStack mirrors...\e[0m"

## uninstall current wp-cli versions ##
rm -R -f /usr/local/bin/wp
rm -R -f /home/wp-completion.bash
rm -R -f /var/www/html/.wp-cli
rm -R -f /var/www/html/wp-cli
sed -i '/WP-CLI/d' /home/${sudo}/.bashrc
sed -i '/wp-completion/d' /home/${sudo}/.bashrc

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/wp-cli.phar http://mirrors.slickstack.io/wp-cli/wp-cli.phar
wget --no-cache --no-cookies -O /tmp/wp-completion.txt http://mirrors.slickstack.io/wp-cli/wp-completion.txt

## make files executable ##
chmod +x /tmp/wp-cli.phar

## copy files to destinations ##
mv -f /tmp/wp-cli.phar /usr/local/bin/wp
mv -f /tmp/wp-completion.txt /home/wp-completion.bash

## reset permissions ##
## https://www.alexgeorgiou.gr/wp-cli-www-data-user-permissions-linux/ ##
chown root:root /usr/local/bin/
chown www-data:www-data /usr/local/bin/wp
chmod 6775 /usr/local/bin/wp
chown www-data:www-data /home/wp-completion.bash
chmod 6775 /home/wp-completion.bash

## modify sudo user's .bashrc ##
## e.g. echo 'source /home/wp-completion.bash' >> ~/.bashrc ##
## https://stackoverflow.com/questions/49668542/create-a-script-that-adds-lines-of-code-to-bashrc-then-reloads-the-terminal ##
echo '
## source Bash completion file for WP-CLI ##
source /home/wp-completion.bash' >> /home/${sudo}/.bashrc

## reload sudo .bashrc ##
## e.g. source ~/.bashrc ##
source /home/${sudo}/.bashrc

####################################################################################################
#### Configure OpenSSL (via Ubuntu) ################################################################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mConfiguring various OpenSSL settings and permissions...\e[0m"

## generate ssl certificate ##
openssl req -new -x509 -nodes -days 730 -newkey rsa:2048 -keyout /etc/ssl/nginx.key -out /etc/ssl/nginx.crt -subj "/C=${country}/ST=${state}/L=${city}/O=${company}/OU=${dept}/CN=${domain}"

## reset permissions ##
chown root:root /etc/ssl/nginx.key
chown root:root /etc/ssl/nginx.crt

####################################################################################################
#### Install Nginx-Extras (Current Ubuntu Repo Version) ############################################
####################################################################################################

## update repos ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## add nginx mainline (dev) ppa ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/add-apt-repository --yes ppa:nginx/development

## update repos ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update

## install nginx-extras ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install nginx-extras

####################################################################################################
#### Configure Nginx-Extras ########################################################################
####################################################################################################

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/nginx-conf.txt http://mirrors.slickstack.io/nginx/nginx-conf.txt

## replace placeholders with slickstack variables ##
sed -i "s/@CACHEMEMORY/${cachememory}/g" /tmp/nginx-conf.txt
sed -i "s/@CACHEINACTIVE/${cacheinactive}/g" /tmp/nginx-conf.txt
sed -i "s/@CACHEMAXSIZE/${cachemaxsize}/g" /tmp/nginx-conf.txt

## rename files ##
mv /tmp/nginx-conf.txt /tmp/nginx.conf

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/nginx.conf /etc/nginx/nginx.conf

## create fastcgi cache directory if does not exist ##
mkdir /var/www/cache

## reset permissions ##
chown www-data:www-data /var/www/cache
chown root:root /etc/nginx/nginx.conf

####################################################################################################
#### Configure Server Block (Nginx-Extras) #########################################################
####################################################################################################

## delete tmp files ##
rm -R -f /tmp/default.txt /tmp/default /tmp/server-block.txt /tmp/server-block /tmp/server-block-ssl.txt /tmp/server-block-ssl

## download latest versions ##
cd /tmp/
# if [[ "$ssl" == "yes" ]]
# then wget --no-cache http://mirrors.slickstack.io/nginx/server-block-ssl.txt
# mv /tmp/server-block-ssl.txt /tmp/default.txt
# else wget --no-cache http://mirrors.slickstack.io/nginx/server-block.txt
# mv /tmp/server-block.txt /tmp/default.txt
# fi
wget --no-cache --no-cookies -O /tmp/server-block-ssl.txt http://mirrors.slickstack.io/nginx/server-block-ssl.txt
mv /tmp/server-block-ssl.txt /tmp/default.txt

## replace @DOMAIN placeholder with slickstack variable ##
sed -i "s/@DOMAIN/${domain}/g" /tmp/default.txt
sed -i "s/@CACHEVALID/${cachevalid}/g" /tmp/default.txt

## enable or disable fastcgi cache ##
## set skip_cache default to 0 only if fastcgi cache enabled in ss-config ##
if [[ "$cache" == "fastcgi" ]]
then sed -i "s/@FASTCGI/0/g" /tmp/default.txt
else sed -i "s/@FASTCGI/1/g" /tmp/default.txt
fi

## rename files ##
mv /tmp/default.txt /tmp/default

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/default /etc/nginx/sites-available/default

## reset permissions ##
chown root:root /etc/nginx/sites-available/default

## restart nginx ##
/etc/init.d/nginx restart

####################################################################################################
#### install php-fpm 7.2 ###########################################################################
####################################################################################################

## purge php 7.0 and extensions ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php7.0

## delete PHP 7.0 files ##
rm -R -f /etc/php/7.0*

## purge php 7.2 and extensions ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php7.2

## install php 7.2 and extensions ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install php7.2 php7.2-bcmath php7.2-curl php7.2-fpm php7.2-gd php7.2-imagick php7.2-json php7.2-mbstring php7.2-mysql php7.2-soap php7.2-xml php7.2-zip

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/php-fpm-conf.txt http://mirrors.slickstack.io/php-fpm/php-fpm-conf.txt
wget --no-cache --no-cookies -O /tmp/php-ini.txt http://mirrors.slickstack.io/php-fpm/php-ini.txt
wget --no-cache --no-cookies -O /tmp/www-conf.txt http://mirrors.slickstack.io/php-fpm/www-conf.txt

## rename files ##
mv /tmp/php-fpm-conf.txt /tmp/php-fpm.conf
mv /tmp/php-ini.txt /tmp/php.ini
mv /tmp/www-conf.txt /tmp/www.conf

## copy files to their destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/php-fpm.conf /etc/php/7.2/fpm/php-fpm.conf
cp -R -f --no-preserve=mode,ownership /tmp/php.ini /etc/php/7.2/fpm/php.ini
cp -R -f --no-preserve=mode,ownership /tmp/php.ini /etc/php/7.2/cli/php.ini
cp -R -f --no-preserve=mode,ownership /tmp/www.conf /etc/php/7.2/fpm/pool.d/www.conf

## customize php settings ##
# sed -i '/error_log/c\error_log = /var/www/logs/error.log' /etc/php/7.2/fpm/php-fpm.conf

## reset permissions ##
chown root:root /etc/php/7.2/fpm/php-fpm.conf
chown root:root /etc/php/7.2/fpm/php.ini
chown root:root /etc/php/7.2/cli/php.ini
chown root:root /etc/php/7.2/fpm/pool.d/www.conf

## set default php version ##
update-alternatives --set php /usr/bin/php7.2

## restart php ##
/etc/init.d/php7.2-fpm restart

###########################
#### install mysql 5.7 ####
###########################

## set noninteractive ##
export DEBIAN_FRONTEND=noninteractive;

## store mysql root password ##
## http://serverfault.com/a/830352/344471 ##
echo debconf mysql-server/root_password password ${dbrootpass} | debconf-set-selections
echo debconf mysql-server/root_password_again password ${dbrootpass} | debconf-set-selections
# echo "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}" | debconf-set-selections
# echo "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}" | debconf-set-selections
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password password ${dbrootpass}"
# debconf-set-selections <<< "mysql-server-5.7 mysql-server/root_password_again password ${dbrootpass}"

## install mysql 5.7 ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install mysql-server-5.7 

## confirm installed ##
echo "MySQL 5.7 is installed, now we will secure it."

####################################################################################################
#### Configure MySQL ###############################################################################
####################################################################################################

## install expect ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install expect

## build expect script ##
tee ~/secure_our_mysql.sh > /dev/null << EOF
spawn $(which mysql_secure_installation)

## re-enter root password ##
expect "Enter password for user root:"
send "${dbrootpass}\r"

## skip the validate password plugin ##
expect "Press y|Y for Yes, any other key for No:"
send "n\r"

## skip change root password ##
expect "Change the password for root ? ((Press y|Y for Yes, any other key for No) :"
send "n\r"

## remove anonymous users ##
expect "Remove anonymous users? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## disable remote connections ##
expect "Disallow root login remotely? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## remote test database ##
expect "Remove test database and access to it? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## reload privileges ##
expect "Reload privilege tables now? (Press y|Y for Yes, any other key for No) :"
send "y\r"

## end of script ##
EOF

## run expect script ##
expect ~/secure_our_mysql.sh

## cleanup ##
rm -v ~/secure_our_mysql.sh

## uninstall expect ##
# apt -qq purge expect > /dev/null # Uninstall Expect, commented out in case you need Expect

## confirm secured ##
echo "Congratulations, MySQL 5.7 is installed and secured. Onward!"

####################################################################################################
#### setup mysql 5.7 users #########################################################################
####################################################################################################

mysql -uroot -p${dbrootpass} -e "CREATE DATABASE ${dbname};"
mysql -uroot -p${dbrootpass} -e "CREATE USER '${dbuser}'@'localhost' IDENTIFIED BY '${dbuserpass}';"
mysql -uroot -p${dbrootpass} -e "CREATE USER '${dbuser}'@'127.0.0.1' IDENTIFIED BY '${dbuserpass}';"
mysql -uroot -p${dbrootpass} -e "GRANT ALL PRIVILEGES ON ${dbname}.* TO '${dbuser}'@'localhost';"
mysql -uroot -p${dbrootpass} -e "GRANT ALL PRIVILEGES ON ${dbname}.* TO '${dbuser}'@'127.0.0.1';"
mysql -uroot -p${dbrootpass} -e "FLUSH PRIVILEGES;"

####################################################################################################
#### Install WordPress #############################################################################
####################################################################################################

## download latest version ##
cd /var/www/html/
wget --no-cache --no-cookies -O /var/www/html/wordpress.zip http://mirrors.slickstack.io/wordpress/wordpress.zip

## unzip files ##
unzip /var/www/html/wordpress.zip
rsync -raqIp /var/www/html/wordpress/* ./

## cleanup ##
rm -R -f wordpress*
rm -R -f latest.tar.gz*
rm -R -f wordpress.zip*

####################################################################################################
#### Install WPLite MU Plugins (for WordPress) #####################################################
####################################################################################################

## install wplite mu-plugins ##
source /var/www/ss-muplugs

####################################################################################################
#### Configure WordPress ###########################################################################
####################################################################################################

## download latest versions ##
wget --no-cache --no-cookies -O /tmp/wp-config.txt http://mirrors.slickstack.io/wordpress/wp-config.txt

## replace placeholders with variables ##
sed -i "s/@DBNAME/${dbname}/g" /tmp/wp-config.txt
sed -i "s/@DBUSER/${dbuser}/g" /tmp/wp-config.txt
sed -i "s/@DBPASSWORD/${dbuserpass}/g" /tmp/wp-config.txt
sed -i "s/@DBNAME/${dbname}/g" /tmp/wp-config.txt
sed -i "s/@TABLEPREFIX/${dbprefix}/g" /tmp/wp-config.txt
# sed -i "s/@DBHOST/${dbhost}/g" /tmp/wp-config.txt
# sed -i "s/@DBCHARSET/${dbcharset}/g" /tmp/wp-config.txt
# sed -i "s/@DBCOLLATE/${dbcollate}/g" /tmp/wp-config.txt

## replace placeholders with variables ##
sed -i "s/@DOMAIN/${domain}/g" /tmp/wp-config.txt

## replace sftp details placeholders ##
sed -i "s/@SFTPDETAILSSERVER/${userserver}/g" /tmp/wp-config.txt
sed -i "s/@SFTPDETAILSUSER/${user}/g" /tmp/wp-config.txt
sed -i "s/@SFTPDETAILSPASSWORD/${userpass}/g" /tmp/wp-config.txt
sed -i "s/@SFTPDETAILSPORT/${userport}/g" /tmp/wp-config.txt
sed -i "s#@SFTPDETAILSROOT#${userroot}#g" /tmp/wp-config.txt
sed -i "s#@SFTPDETAILSPUBLIC#${userpublic}#g" /tmp/wp-config.txt

## replace cloudflare placeholders ##
sed -i "s/@CLOUDFLAREAPIKEY/${cloudflareapikey}/g" /tmp/wp-config.txt
sed -i "s/@CLOUDFLAREAPIEMAIL/${cloudflareapiemail}/g" /tmp/wp-config.txt

## replace salt keys ##
sed -i "s/@AUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCEKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@AUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCESALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt

## Replace Placeholders: Debug ##
if [[ "$production" == "yes" ]]
then sed -i "s/@DEBUGON/false/g" /tmp/wp-config.txt
else sed -i "s/@DEBUGON/true/g" /tmp/wp-config.txt
fi

## Replace Placeholders: Debug ##
if [[ "$production" == "yes" ]]
then sed -i "s/@DEBUGDISPLAY/false/g" /tmp/wp-config.txt
else sed -i "s/@DEBUGDISPLAY/true/g" /tmp/wp-config.txt
fi

## rename files ##
mv /tmp/wp-config.txt /tmp/wp-config.php

## copy files to destinations ##
cp -R -f --no-preserve=mode,ownership /tmp/wp-config.php /var/www/html/wp-config.php

## delete tmp files ##
rm -R -f /tmp/wp-config*

## create temp directory if doesn't exist (will not overwrite) ##
mkdir /var/www/html/wp-content/temp

####################################################################################################
#### install monit (latest apt version) ############################################################
####################################################################################################

# ## install monit ##
# DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install monit

## configure monit settings ##
# sed -i 's@/var/log/monit.log@/var/www/logs/monit.log@' /etc/monit/monitrc

## reset permissions ##
# chown root:root /etc/monit/monitrc
# chmod 0700 /etc/monit/monitrc 

## restart monit ##
# /etc/init.d/monit restart

####################################################################################################
#### Configure UFW Firewall ########################################################################
####################################################################################################

## delete tmp files ##
rm -R -f /tmp/ufw-conf.txt* /tmp/ufw.conf*
rm -R -f /tmp/user-rules.txt* /tmp/user.rules*

## install ufw ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install ufw

## ufw rules ##
ufw default deny incoming
ufw default allow outgoing
ufw allow 6969
ufw allow 80
ufw allow 443
ufw allow 6379
ufw --force disable
ufw --force enable
echo "y" | ufw enable

# retrieve latest versions ##
cd /tmp/
wget --no-cache http://mirrors.slickstack.io/ubuntu/ufw-conf.txt
wget --no-cache http://mirrors.slickstack.io/ubuntu/user-rules.txt
# wget --no-cache http://mirrors.slickstack.io/ubuntu/18.04/ufw/ver/ufw-conf.txt
# wget --no-cache http://mirrors.slickstack.io/ubuntu/18.04/ufw/ver/user-rules.txt

## rename files ##
mv /tmp/ufw-conf.txt /tmp/ufw.conf
mv /tmp/user-rules.txt /tmp/user.rules

## copy files to their destinations ##
cp -R -f -d --no-preserve=mode,ownership /tmp/ufw.conf /etc/ufw/ufw.conf
cp -R -f -d --no-preserve=mode,ownership /tmp/user.rules /etc/ufw/user.rules

## delete tmp files ##
rm -R -f /tmp/ufw-conf.txt* /tmp/ufw.conf*
rm -R -f /tmp/user-rules.txt* /tmp/user.rules*

####################################################################################################
#### install redis-server (latest apt version) #####################################################
#### install php-redis a.k.a. predis (latest apt version) ##########################################
####################################################################################################

## purge redis-server ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge redis-server

## purge php-redis ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" purge php-redis

## install redis-server ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install redis-server

## install php-redis ##
DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' /usr/bin/apt -q --yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install php-redis

####################################################################################################
#### Configure Redis-Server ########################################################################
####################################################################################################

## configure redis for object caching ##
sed -i '/maxmemory.*bytes.*/c\maxmemory 256mb' /etc/redis/redis.conf
sed -i '/maxmemory-policy noeviction/c\maxmemory-policy allkeys-lru' /etc/redis/redis.conf
sed -i '/always-show-logo yes/c\always-show-logo no' /etc/redis/redis.conf
# sed -i '/logfile/c\logfile /var/www/logs/redis.log' /etc/redis/redis.conf
# sed -i '/dir /c\dir /tmp' /etc/redis/redis.conf

## create redis log file if does not exist ##
# if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi
# mkdir /var/run/redis

## reset permissions ##
# chown redis:redis /var/www/logs/redis.log
chown redis:redis /etc/redis/redis.conf
chown redis:redis /var/run/redis
# chmod 775 /var/www/logs/redis.log
chmod 775 /etc/redis/redis.conf
chmod 775 /var/run/redis

####################################################################################################
#### Configure ClamAV ##############################################################################
####################################################################################################

## update ClamAV malware cache ##
## NO LONGER NEEDED DURING INITIAL INSTALL (RUNS AUTOMATICALLY) ##
# freshclam

# sed -i '/UpdateLogFile/c\UpdateLogFile /var/www/logs/clamav.log' /etc/clamav/freshclam.conf
sed -i '/LogRotate/c\LogRotate true' /etc/clamav/freshclam.conf
sed -i '/Checks/c\Checks 2' /etc/clamav/freshclam.conf
sed -i '/MaxAttempts/c\MaxAttempts 3' /etc/clamav/freshclam.conf

####################################################################################################
#### Finish SlickStack Installation ################################################################
####################################################################################################

## run scripts ##
source /var/www/ss-clean
source /var/www/ss-perms

## restart services ##
/etc/init.d/nginx restart
/etc/init.d/php7.2-fpm restart
/etc/init.d/redis-server restart
/etc/init.d/ufw force-reload
/etc/init.d/ufw restart

## confirm installation complete ##
echo -e "\e[36mSlickStack installation complete! Please reboot server and ensure CloudFlare is activated.\e[0m"
